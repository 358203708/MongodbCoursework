var db = connect('twitter');


var queryByUser = {
    'numOfTweets': 0,
    'uniqueUserCnt': 0, //Q1
    'tweetsCnt_top10': [], //Q2
    'timeStamp_e': "", //Q3
    'timeStamp_l': "", //Q3
    'timeDelta': 0, //Q4
    'averLen': 0, //Q5
    'unigramCnt': [],
    'bigramCnt': [],
    'averHashTagCnt': 0, //Q7
    'collectionName': 'tweets', //collection of data source
    'mrcollectionName': 'mrout', //collection to store tmp records generated by mapReduce
    'txtcollectionName': 'textout', //collection to store tmp records generated by mapReduce2


    'preProcessData': function () {
        // var name = this.collectionName
        print("begin data parse , invalid data will be removed");
        db.getCollection(this.collectionName).find().forEach(function (it) {
            if ((it.id_member < 0) || (typeof (it.id_member) != "number") || (typeof (it.text) != "string")) {
                db.getCollection(queryByUser.collectionName).remove({
                    "_id": it._id
                });

            }
        })
    },

    'mapReduce': function () {
        db.getCollection(this.collectionName).mapReduce(
            function () {
                emit(this.id_member, {
                    'tweetsCnt': 1,
                    'tweetsLen': this.text.length
                });
            }, //map 
            function (key, values) {
                var total = 0;
                var tweetsLen = 0;
                for (var i = 0; i < values.length; i++) {
                    total += values[i].tweetsCnt;
                    tweetsLen += values[i].tweetsLen;

                }
                return {
                    'tweetsCnt': total,
                    'tweetsLen': tweetsLen
                }
            }, //reduce s
            {
                out: 'mrout'

            }
        )
    },

    'mapReduce2': function () {
        db.getCollection(this.collectionName).mapReduce(
            function () {
                var text = this.text;
                if (text) {
                    // quick lowercase to normalize per your requirements
                    text = text.toString().toLowerCase().split(" ");
                    for (var i = text.length - 1; i >= 0; i--) {
                        // might want to remove punctuation, etc. here
                        if (text[i]) { // make sure there's something
                            emit(text[i], {
                                'type': 0,
                                'count': 1
                            }); // store a 1 for each word
                        }
                    };
                    for (var i = 0; i < text.length - 1; i++) {
                        if (text[i]) {
                            emit(text[i] + ' ' + text[i + 1], {
                                'type': 1,
                                'count': 1
                            })
                        }
                    };
                }
            }, //map 
            function (key, values) {
                var cnt = 0;
                for (var i = 0; i < values.length - 1; i++) {
                    cnt++;
                }
                return {
                    'type': values[0].type,
                    'count': cnt
                } //reduce 
            }, {
                out: 'textout'

            }
        )
    },


    'isMRsuccess': function () {
        var num = 0;
        var count = 0;
        db.getCollection(this.mrcollectionName).find().forEach(function (it) {
            num += it.value.tweetsCnt;

        });
        db.getCollection(this.txtcollectionName).find().forEach(function (it) {
            count += it.value.count;

        });
        if ((num == db.getCollection(this.collectionName).count()) && (count != 0)) {
            this.numOfTweets = num;

            //Q1
            this.uniqueUserCnt = db.getCollection(this.mrcollectionName).count();
            return true;
        } else {
            this.numOfTweets = 0;
            this.uniqueUserCnt = 0;
            return false;
        }
    },
    //
    'isPreProcessDatasuccess': function () {
        var count = db.getCollection(this.collectionName).find({
            '$where': '(this.id_member < 0) || (typeof(this.text) != \"string\")'
        }).count();
        if (count > 0) {
            return false;
        } else {
            return true;
        }
    },

    'queryInit': function () { //need to be excuted only when the collction's document change or the first time to query

        if (true == this.isPreProcessDatasuccess()) {
            print("collection is already preprocessed");
        } else {
            print("begin to preprocess data");
            this.preProcessData();

        };


        if (true == this.isMRsuccess()) {
            print("collection is already mapReduced");

        } else {
            print("begin mapReduce");
            db.getCollection(this.collectionName).ensureIndex({
                'timestamp': 1
            });
            this.mapReduce();
            this.mapReduce2();
            return this.isMRsuccess();
        }
    },
    /////////////////////

    'query': function () {
        if (true == this.isMRsuccess()) {

            var averLen = 0;
            var hashTagCnt = 0;
            var numOfTweets = this.numOfTweets;
            //var userCnt = this.uniqueUserCnt;
            var tweets_top10 = 0;
            var timeDelta = 0;
            var meanTimeDelta = 0;

            //Q2
            //print("Following is the amount of the tweetsCnt of the top10 users");
            var tmp = [];
            db.getCollection(this.mrcollectionName).find().sort({
                "value.tweetsCnt": -1
            }).limit(10).forEach(function (it) {
                var rec = {
                    'id': it._id,
                    'tweetsCnt': it.value.tweetsCnt
                };
                tmp.push(rec);

            });
            this.tweetsCnt_top10 = tmp;

            //Q3
            this.timeStamp_e = db.getCollection(this.collectionName).find().sort({
                "timestamp": 1
            }).limit(1)[0].timestamp;
            this.timeStamp_l = db.getCollection(this.collectionName).find().sort({
                "timestamp": -1
            }).limit(1)[0].timestamp;

            //Q4
            var timeStampCount = 0;
            var earlisetTime = this.timeStamp_e
            db.getCollection(this.collectionName).distinct('timestamp').forEach(function (it) {
                timeDelta += ISODate(it).getTime() - ISODate(earlisetTime).getTime();
                timeStampCount++;
            });
            this.meanTimeDelta = timeDelta / timeStampCount;

            //Q5 
            db.getCollection(this.mrcollectionName).find().forEach(function (it) {
                averLen += it.value.tweetsLen / numOfTweets;
            });
            this.averLen = averLen;
            //Q6
            var txtTmp = [];
            db.getCollection(this.txtcollectionName).find({
                "value.type": 0
            }).sort({
                "value.count": -1
            }).limit(10).forEach(function (it) {
                var unigram = {
                    'id': it._id,
                    'count': it.value.count
                };
                txtTmp.push(unigram);

            });
            this.unigramCnt = txtTmp;

            var txtTmp2 = [];
            db.getCollection(this.txtcollectionName).find({
                "value.type": 1
            }).sort({
                "value.count": -1
            }).limit(10).forEach(function (it) {
                var bigram = {
                    'id': it._id,
                    'count': it.value.count
                };
                txtTmp2.push(bigram);

            });
            this.bigramCnt = txtTmp2;

            //Q7
            db.getCollection(this.collectionName).find({
                "text": /#/
            }).forEach(function (it) {
                hashTagCnt += it.text.match(/#/g).length;
            });
            this.averHashTagCnt = hashTagCnt / numOfTweets;

            //Q8



            return true;
        } else {
            this.averLen = 0;
            this.averHashTagCnt = 0;
            this.tweetsCnt_top10 = 0;
            this.timeStamp_e = "";
            this.timeStamp_l = "";
            this.timeDelta = 0;
            return false;
        }

    },
    'output': function () {
        print("--------------------------------------------------------");
        print("Q1:uniqueUserCnt:" + this.uniqueUserCnt);
        print("--------------------------------------------------------");
        print("Q2:top10 users");
        for (var i = 0; i < this.tweetsCnt_top10.length; i++) {
            var rec = this.tweetsCnt_top10[i];
            print("\ttop" + (i + 1) + ":id:" + rec.id + "\t\t\ttweetsCnt:" + rec.tweetsCnt);
        };
        print("--------------------------------------------------------");
        print("Q3:timeStamp_e:" + this.timeStamp_e);
        print("Q3:timeStamp_l:" + this.timeStamp_l);
        print("--------------------------------------------------------");
        print("Q4:meanTimeDelta:" + this.meanTimeDelta + "ms");
        print("--------------------------------------------------------");
        print("Q5:averLen:" + this.averLen);
        print("--------------------------------------------------------");
        print("Q6:top10 unigram strings");
        for (var i = 0; i < this.unigramCnt.length; i++) {
            var unigram = this.unigramCnt[i];
            print("\ttop" + (i + 1) + ":id:" + unigram.id + "\t\t\ttxtCnt:" + unigram.count);
        };
        print("Q6:top10 bigram strings");
        for (var i = 0; i < this.bigramCnt.length; i++) {
            var bigram = this.bigramCnt[i];
            print("\ttop" + (i + 1) + ":id:" + bigram.id + "\t\t\ttxtCnt:" + bigram.count);
        };
        print("--------------------------------------------------------");
        print("Q7:averHashTagCnt:" + this.averHashTagCnt);
        print("--------------------------------------------------------");
        //print("Q8:area:");


    }

}


queryByUser.queryInit();
queryByUser.query();
queryByUser.output();